name: "Automate Staging Release Process (Composite)"
description: "Composite action handling release automation with TypeScript integration"
inputs:
  release_version:
    description: "Platform version (x-x-x format)"
    required: true
  github_token:
    description: "GitHub token for authentication"
    required: true
  github_actor:
    description: "GitHub actor/username"
    required: true
  helm_registry:
    description: "Helm Registry URL"
    required: true
  helm_username:
    description: "Helm Registry Username"
    required: true
  release_type:
    description: "Release type: 'minor' or 'patch'"
    required: true
    default: "minor"
    

outputs:
  platform_version:
    description: "Final platform chart version"
    value: ${{ steps.set_output.outputs.platform_version }}

runs:
  using: "composite"
  steps:
    - name: Set Release Mode
      id: release_mode
      run: |
        echo "release_type=${{ inputs.release_type }}" >> $GITHUB_OUTPUT
        if [ "${{ inputs.release_type }}" = "patch" ]; then
          echo "skip_platform_pr_merge=true" >> $GITHUB_OUTPUT
          echo "version_source=default" >> $GITHUB_OUTPUT
          echo "commit_prefix=release(patch):" >> $GITHUB_OUTPUT
        else
          echo "skip_platform_pr_merge=false" >> $GITHUB_OUTPUT
          echo "version_source=platform" >> $GITHUB_OUTPUT
          echo "commit_prefix=release(minor):" >> $GITHUB_OUTPUT
        fi
      shell: bash
  
    - name: Checkout consumer's repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js environment
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'

    - name: Configure Git environment
      shell: bash
      run: |
        git config --global user.name "${{ inputs.github_actor }}"
        git config --global user.email "${{ inputs.github_actor }}@users.noreply.github.com"
        echo "GITHUB_TOKEN=${{ inputs.github_token }}" >> $GITHUB_ENV
        gh auth setup-git
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Update service chart versions
      shell: bash
      working-directory: ${{ github.action_path }}
      run: scripts/update_service_chart_versions.sh "${{ inputs.release_version }}"
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Merge service PRs
      shell: bash
      working-directory: ${{ github.action_path }}
      run: scripts/merge_service_pr.sh "${{ inputs.release_version }}"
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Wait for workflows to start
      shell: bash
      run: sleep 10

    - name: Monitor release workflows
      shell: bash
      working-directory: ${{ github.action_path }}
      run: node dist/monitor_release.js

    - name: Setup Release Branch
      shell: bash
      run: |
        if [ "${{ inputs.release_type }}" = "patch" ]; then
          # For patch releases, stay on default branch
          echo "Patch release - staying on default branch"
          
          # Get default branch using GitHub API
          DEFAULT_BRANCH=$(gh repo view --json defaultBranchRef -q '.defaultBranchRef.name')
          echo "Default branch is: $DEFAULT_BRANCH"
          
          git fetch origin
          git checkout "${DEFAULT_BRANCH}"
          git pull origin "${DEFAULT_BRANCH}"
        else
          # For minor releases, use platform branch
          BRANCH_NAME="platform-${{ inputs.release_version }}"
          echo "Checking out existing branch ${BRANCH_NAME}..."
          
          # Fetch the latest remote state
          git fetch origin
          
          # Force checkout and reset to match remote
          git checkout -B "${BRANCH_NAME}" "origin/${BRANCH_NAME}"
        fi
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Update infra chart versions
      shell: bash
      working-directory: ${{ github.workspace }}
      run: ${{ github.action_path }}/scripts/update_infra_chart_versions.sh "${{ inputs.release_version }}"
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Commit changes to infra
      shell: bash
      working-directory: ${{ github.workspace }}
      run: ${{ github.action_path }}/scripts/commit_changes.sh "${{ inputs.release_version }}"
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Authenticate Registries
      shell: bash
      env:
        HELM_REGISTRY: ${{ inputs.helm_registry }}
        HELM_USER: ${{ inputs.helm_username }}
        HELM_TOKEN: ${{ inputs.github_token }}
      run: echo $HELM_TOKEN | helm registry login $HELM_REGISTRY -u $HELM_USER --password-stdin

    - name: Run Helm Dependencies
      run: helm dependency update
      shell: bash
      working-directory: ${{ github.workspace }}/charts/platform

    - name: Commit Changes
      run: |
        if [ "${{ inputs.release_type }}" = "patch" ]; then
          # For patch, push to default branch
          DEFAULT_BRANCH=$(gh repo view --json defaultBranchRef -q '.defaultBranchRef.name')
          git add charts/platform/*
          git commit -s -m "release(patch): Update platform charts for ${{ inputs.release_version }}" --no-verify || \
            echo "No changes to commit."
          git push origin "${DEFAULT_BRANCH}"
        else
          # For minor, push to platform branch
          BRANCH_NAME="platform-${{ inputs.release_version }}"
          git add charts/platform/*
          git commit -s -m "chore: Update platform charts for ${{ inputs.release_version }}" --no-verify || \
            echo "No changes to commit."
          git push origin $BRANCH_NAME
        fi
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Merge infra PR
      shell: bash
      working-directory: ${{ github.action_path }}
      run: scripts/merge_infra_pr.sh "${{ inputs.release_version }}"
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Capture platform version
      id: set_output
      shell: bash
      run: |
        VERSION=$(yq e '.version' Chart.yaml)
        echo "platform_version=$VERSION" >> $GITHUB_OUTPUT
      working-directory: ${{ github.workspace }}/charts/platform
